{"ast":null,"code":"var _jsxFileName = \"/Users/ax/codeworks/senior/legacy/SpendTune-Solo-Project/client/spendtune/src/components/syncPage.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { usePlaidLink } from 'react-plaid-link';\nimport { useNavigate } from 'react-router-dom';\nimport { exchangePublicToken } from '../plaidService';\nimport { useCombinedStore } from '../Store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SyncPage(props) {\n  _s();\n  const setLoggedUser = useCombinedStore(state => state.setLoggedUser);\n  const navigate = useNavigate();\n  const linkToken = props.tokenStore.link_token;\n  const {\n    open\n  } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async public_token => {\n      const updatedUser = await exchangePublicToken(public_token);\n      setLoggedUser(updatedUser);\n      console.log('Plaid API - Link successful');\n      navigate('/home');\n    }\n  });\n  useEffect(() => {\n    open();\n  }, [open]);\n  function goBack() {\n    navigate('/home');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sync\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Please wait for Plaid's widget to load\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"widget-prompt\",\n      children: \"You can also use the button to load widget manually.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => open(),\n      children: \"Load widget\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goBack,\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(SyncPage, \"w8zqnE5yfzCcfweiDbQq9RX/lsQ=\", false, function () {\n  return [useCombinedStore, useNavigate, usePlaidLink];\n});\n_c = SyncPage;\nexport default SyncPage;\nvar _c;\n$RefreshReg$(_c, \"SyncPage\");","map":{"version":3,"names":["useEffect","usePlaidLink","useNavigate","exchangePublicToken","useCombinedStore","jsxDEV","_jsxDEV","SyncPage","props","_s","setLoggedUser","state","navigate","linkToken","tokenStore","link_token","open","token","onSuccess","public_token","updatedUser","console","log","goBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ax/codeworks/senior/legacy/SpendTune-Solo-Project/client/spendtune/src/components/syncPage.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { usePlaidLink } from 'react-plaid-link';\nimport { useNavigate } from 'react-router-dom';\n\nimport { exchangePublicToken } from '../plaidService';\nimport { useCombinedStore } from '../Store';\n\nfunction SyncPage(props) {\n\n  const setLoggedUser = useCombinedStore(state => state.setLoggedUser);\n\n  const navigate = useNavigate();\n  const linkToken = props.tokenStore.link_token;\n\n  const { open } = usePlaidLink({\n    token: linkToken,\n    onSuccess: async (public_token) => {\n      const updatedUser = await exchangePublicToken(public_token)\n      setLoggedUser(updatedUser);\n      console.log('Plaid API - Link successful');\n      navigate('/home');\n    },\n  });\n\n  useEffect( () => {\n    open()\n  }, [open])\n\n  function goBack() {\n    navigate('/home');\n  }\n\n  return (\n    <div className='sync'>\n      <h3>Please wait for Plaid's widget to load</h3>\n      <p className='widget-prompt'>You can also use the button to load widget manually.</p>\n      <button onClick={() => open()}>Load widget</button>\n      <button onClick={goBack}>Back</button>\n    </div>\n  );\n}\n\nexport default SyncPage;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,SAASC,mBAAmB,QAAQ,iBAAiB;AACrD,SAASC,gBAAgB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAEvB,MAAMC,aAAa,GAAGN,gBAAgB,CAACO,KAAK,IAAIA,KAAK,CAACD,aAAa,CAAC;EAEpE,MAAME,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,SAAS,GAAGL,KAAK,CAACM,UAAU,CAACC,UAAU;EAE7C,MAAM;IAAEC;EAAK,CAAC,GAAGf,YAAY,CAAC;IAC5BgB,KAAK,EAAEJ,SAAS;IAChBK,SAAS,EAAE,MAAOC,YAAY,IAAK;MACjC,MAAMC,WAAW,GAAG,MAAMjB,mBAAmB,CAACgB,YAAY,CAAC;MAC3DT,aAAa,CAACU,WAAW,CAAC;MAC1BC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CV,QAAQ,CAAC,OAAO,CAAC;IACnB;EACF,CAAC,CAAC;EAEFZ,SAAS,CAAE,MAAM;IACfgB,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,SAASO,MAAMA,CAAA,EAAG;IAChBX,QAAQ,CAAC,OAAO,CAAC;EACnB;EAEA,oBACEN,OAAA;IAAKkB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBnB,OAAA;MAAAmB,QAAA,EAAI;IAAsC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/CvB,OAAA;MAAGkB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAoD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACrFvB,OAAA;MAAQwB,OAAO,EAAEA,CAAA,KAAMd,IAAI,CAAC,CAAE;MAAAS,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnDvB,OAAA;MAAQwB,OAAO,EAAEP,MAAO;MAAAE,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEV;AAACpB,EAAA,CAjCQF,QAAQ;EAAA,QAEOH,gBAAgB,EAErBF,WAAW,EAGXD,YAAY;AAAA;AAAA8B,EAAA,GAPtBxB,QAAQ;AAmCjB,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}